1、pwd   :  显示用户当前所处的路径
2、ls    ： 显示当前文件夹下的内容
3、rm -rf + 要删除的内容   :  删除文件或文件夹
4、cd + 要进入的目录   ：改变路径
5、mkdir + 要创建的文件夹名字  ：创建文件夹
6、git config --global user.name "名字"  ： 创建git帐号
7、git config --global user.email "邮箱" : 创建邮箱帐号
8、git init  : 创建版本库（告诉git在哪里安家）（前提条件：需要用cd命令先进入要安家的目录）
9、git add + 文件名 ： 把要添加/改变的文件放到台面上
10、git commit -m "内容"  ：把添加/改变的文件正式放入仓库
  （add 可以多次，commit 只要一次就行）
11、git status : 用来检测当前版本和仓库中的是否一致
12、git diff :用来显示哪些地方不一样（详细修改的信息）
13、git log ： 显示用户所修改的信息（git log --pretty=oneline : 美化git log的信息）
14、git reset --hard + 版本号（versionName  通过git log 看到的十六进制版本号，一般前6位即可）：回退到某个时间点（在版本之间进行切换）
15、cat + 文件名 ：显示文件的内容
16、HEAD指针：HEAD指向哪个版本号，当前版本就是谁（工作区的版本就是谁）
17、git reflog ：展示穿梭的过程（用来后悔）
18、touch : 创建文件
19、vi + 文件名 ：进入文件编辑模式
（一般模式：dd：删除光标所在行，x：删除单个字符；插入模式：按键盘‘i’；命令模式：wq/x：保存退出，u：撤销）
20、git分区：工作区、暂存区、支线区，commit的内容只是暂存区的内容，若工作区未add，那么工作区的改变就不会commit
21、当维护多个不重名的文件时（如：note.txt 和 LICENSE），git的这些所有命令都可以指定文件名
    例如：git diff HEAD -- note.txt：只比较版本库中note.txt和工作区note.txt的区别，忽略LICENSE的影响
22、git checkout -- 文件名：还原仓库中的HEAD（慎用：会把之前没有提交的内容都还原）
23、git reset HEAD -- 文件名：放弃暂存区（通过git add 添加的）的内容，同时把工作区的内容也还原到HEAD状态（慎用）
